import org.springframework.boot.gradle.plugin.ResolveMainClassName

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'distribution'
	id 'application'
}

distributions {
	main {
		distributionBaseName.set(rootProject.name)
	}
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('installFrontend', Exec){
	inputs.file(file("frontend/yarn.lock"))
	inputs.file(file("frontend/package.json"))
	commandLine("yarn", "--cwd", "frontend", "install")
}

tasks.register("buildFrontend",Exec){
	dependsOn("installFrontend")
	inputs.dir(file("frontend"))
	outputs.dir(file("frontend/dist"))
	commandLine("yarn", "--cwd", "frontend", "build")
}

tasks.register("copyFrontend", Sync){
	dependsOn("buildFrontend")
	from(file("./frontend/dist"))
	into(file("$buildDir/resources/main/static"))
	doLast {
		println("copied built frontend to static resources")
	}
}

tasks.register("cleanFrontend", Delete){
	delete(file("./frontend/dist"))
	delete(file("./src/main/resources/static"))
}

tasks.withType(ResolveMainClassName).configureEach {
	dependsOn(copyFrontend)
}
